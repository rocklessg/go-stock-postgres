// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: stock.sql

package database

import (
	"context"
)

const createStock = `-- name: CreateStock :one
INSERT INTO stocks (
    Name, Price, Company
) VALUES (
    $1, $2, $3
)
RETURNING id, name, price, company, createdat, updatedat
`

type CreateStockParams struct {
	Name    string
	Price   float32
	Company string
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, createStock, arg.Name, arg.Price, arg.Company)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Company,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteStock = `-- name: DeleteStock :exec
DELETE FROM stocks
WHERE ID = $1
`

func (q *Queries) DeleteStock(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteStock, id)
	return err
}

const getStock = `-- name: GetStock :one
SELECT id, name, price, company, createdat, updatedat FROM stocks
WHERE ID = $1 LIMIT 1
`

func (q *Queries) GetStock(ctx context.Context, id int64) (Stock, error) {
	row := q.db.QueryRow(ctx, getStock, id)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Company,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const listStocks = `-- name: ListStocks :many
SELECT id, name, price, company, createdat, updatedat FROM stocks
ORDER BY Name
`

func (q *Queries) ListStocks(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.Query(ctx, listStocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Company,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStock = `-- name: UpdateStock :exec
UPDATE stocks
SET Name = $2,
        Price = $3,
        Company = $4,
        UpdatedAt = CURRENT_TIMESTAMP
WHERE ID = $1
RETURNING id, name, price, company, createdat, updatedat
`

type UpdateStockParams struct {
	ID      int64
	Name    string
	Price   float32
	Company string
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) error {
	_, err := q.db.Exec(ctx, updateStock,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Company,
	)
	return err
}
